/*
 * Copyright 2016 Florian Hassanen
 *
 * This file is part of mmo-server.
 *
 * mmo-server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * mmo-server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with mmo-server.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id "net.ltgt.apt" version "0.6"
}

defaultTasks 'eclipse', 'idea'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 8

    repositories {
        mavenCentral()
    }
}

def jackson = "com.fasterxml.jackson.core:jackson-databind:2.5.3"

project(":server") {
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'

    mainClassName = 'mmo.server.Main'

    sourceSets {
        main {
            java {
                srcDirs "src"
            }
            resources {
                srcDirs "${buildDir}/markdown", "resources"
            }
        }
        test {
            java {
                srcDirs "test"
            }
        }
    }


    task copyMarkDown(type: Copy) {
        from '.'
        into "${buildDir}/markdown/mmo/server"
        include "*.md"
    }

    tasks.processResources.dependsOn(copyMarkDown)

    dependencies {
        compile "ch.qos.logback:logback-classic:1.1.3"
        compile "io.netty:netty-all:4.0.36.Final"
        compile "com.google.guava:guava:18.0"
        compile "com.google.dagger:dagger:2.2"
        apt "com.google.dagger:dagger-compiler:2.2"
        compileOnly "com.google.auto.factory:auto-factory:1.0-beta3"
        apt "com.google.auto.factory:auto-factory:1.0-beta3"
        compile jackson
        compile "org.jsoup:jsoup:1.8.2"

        testCompile "org.testng:testng:6.9.4"
        testCompile "org.hamcrest:java-hamcrest:2.0.0.0"
    }

    task protodoc(type: Javadoc, dependsOn: ":doclet:build") {
        source = sourceSets.main.allJava
        classpath = sourceSets.main.compileClasspath + sourceSets.main.output.dirs
        destinationDir = reporting.file("protocol-docs")
        title = null
        options.doclet = "mmo.server.doclet.JsonExport"
        project(":doclet").afterEvaluate { doclet ->
            options.docletpath = doclet.sourceSets.main.runtimeClasspath as List
        }
    }
    test {
        useTestNG()
        testLogging {
            exceptionFormat "full"
        }
    }

    run {
        standardInput = System.in
    }
}

project(":doclet") {
    sourceSets {
        main {
            java {
                srcDirs "src"
            }
        }
    }

    dependencies {
        compile project(":server")
        compile files("${System.getProperty('java.home')}/../lib/tools.jar")
        compile jackson
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
